using System;

namespace EulerProblems {
	public static class Program {

		// The sequence of triangle numbers is generated by adding the natural numbers.
		// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
		// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

		// Let us list the factors of the first seven triangle numbers:

		// 1: 1
		// 3: 1,3
		// 6: 1,2,3,6
		// 10: 1,2,5,10
		// 15: 1,3,5,15
		// 21: 1,3,7,21
		// 28: 1,2,4,7,14,28

		// We can see that 28 is the first triangle number to have over five divisors.
		
		// What is the value of the first triangle number to have over five hundred divisors?

		public static int GetNthTriangleNumber(int n) {
			if(n < 0) return -1;
			return (n * n + n) / 2;
		}

		public static int GetNumberOfDivisors(int x) {
			if(x < 0) return -1;

			int divisors = 0;

			for(int i = 1; i <= Math.Sqrt(x); i++) {
				if(x % i == 0) {
					if(i * i == x) {
						divisors++;
					} else {
						divisors += 2;
					}
				}
			}

			return divisors;

		}

		public static int FirstTriangleNumberWith(int minDivisors) {
			if(minDivisors <= 0) return -1;
			if(minDivisors == 1) return 1;

			var triangleNumber = 1;
			var index = 2;

			while(true) {
				if(minDivisors <= GetNumberOfDivisors(triangleNumber)) {
					return triangleNumber;
				}

				triangleNumber += index;
				index += 1;
			}

		}

		public static void Main() {

			Console.WriteLine(FirstTriangleNumberWith(minDivisors: 500));
			Console.ReadLine();

		}
	}
}
